name: Release & Publish

on:
  pull_request:
    types:
      - closed
    branches:
      - main

  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create a New Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.1.30

      - name: Install dependencies
        run: bun install

      - name: Build app to validate changes
        run: bun run build

      - name: Bump version and push tag
        id: tag_version
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DRY_RUN: true
          PRERELEASE: false
          DEFAULT_BUMP: patch
          BRANCH_HISTORY: last

      - run: echo "previous_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo '')" >> $GITHUB_ENV
      - name: Generate Changelog
        id: changelog
        uses: jaywcjlove/changelog-generator@main
        if: env.previous_tag
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filter-author: (jaywcjlove|小弟调调™|dependabot\[bot\]|Renovate Bot)
          filter: (^[\s]+?[R|r]elease)|(^[R|r]elease)
          template: |
            ## 🚀 Feature
            {{feat}}
            ## 🐛 Bugs
            {{fix}}
            ## ♻️ Refactors
            {{refactor,perf,clean}}
            ## 📚 Documentation
            {{docs,doc,style,types,typescript,flow}}
            ## CI&CD
            {{ci,build,workflow,actions}}
            ## 🔧 Chores 
            {{chore,style,__unknown__||🔶 Nothing change}}
      - name: Update version in package.json
        run: |
          NEW_VERSION="${{ steps.tag_version.outputs.new_tag }}"
          NEW_VERSION="${NEW_VERSION#v}"
          # Update package.json
          jq ".version = \"$NEW_VERSION\"" package.json > package.json.new
          mv package.json.new package.json
      - name: Update CHANGELOG.md
        run: |
          # Check if changelog was generated
          if [ -z "${{ steps.changelog.outputs.changelog }}" ]; then
            echo "No changelog generated, skipping update"
            exit 0
          fi
          # Save changelog to a file to avoid heredoc issues
          echo "${{ steps.changelog.outputs.changelog }}" > /tmp/changelog_content.md
          if [ -f "CHANGELOG.md" ]; then
            # Create backup of old changelog
            cp CHANGELOG.md CHANGELOG.md.bak
            
            # Create new changelog with latest release notes at the top
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat /tmp/changelog_content.md >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Append old changelog content (skipping the header)
            sed '1,2d' CHANGELOG.md.bak >> CHANGELOG.md
            
            # Remove backup
            rm CHANGELOG.md.bak
          else
            # Create new changelog
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat /tmp/changelog_content.md >> CHANGELOG.md
          fi
      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          # Add files that were changed
          git add package.json
          git add CHANGELOG.md
          # Only commit if there are changes
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "chore(release): ${{ steps.tag_version.outputs.new_tag }}"
            git push --follow-tags origin ${{ github.event.inputs.branch }}
          fi
      - name: Release App
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: ${{ steps.tag_version.outputs.new_tag }}
          body: |
            ${{ steps.changelog.outputs.compareurl }}
            ${{ steps.changelog.outputs.changelog }}

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch }}

      - name: Pull Latest Changes
        run: git pull origin ${{ github.event.inputs.branch }}

      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          registry-url: "https://registry.npmjs.org"

      - run: npm i
      - run: npm run build
      - run: npm pack --dry-run
      - run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
